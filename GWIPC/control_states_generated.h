// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CONTROLSTATES_GWIPC_H_
#define FLATBUFFERS_GENERATED_CONTROLSTATES_GWIPC_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 1 &&
              FLATBUFFERS_VERSION_REVISION == 4,
             "Non-compatible flatbuffers version included");

namespace GWIPC {

struct ControlStates;
struct ControlStatesBuilder;

struct ControlStates FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ControlStatesBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CAMERA_YAW_ANGLE = 4,
    VT_STRAFE_LEFT = 6,
    VT_STRAFE_RIGHT = 8,
    VT_MOVE_FORWARD = 10,
    VT_MOVE_BACKWARDS = 12
  };
  float camera_yaw_angle() const {
    return GetField<float>(VT_CAMERA_YAW_ANGLE, 0.0f);
  }
  bool strafe_left() const {
    return GetField<uint8_t>(VT_STRAFE_LEFT, 0) != 0;
  }
  bool strafe_right() const {
    return GetField<uint8_t>(VT_STRAFE_RIGHT, 0) != 0;
  }
  bool move_forward() const {
    return GetField<uint8_t>(VT_MOVE_FORWARD, 0) != 0;
  }
  bool move_backwards() const {
    return GetField<uint8_t>(VT_MOVE_BACKWARDS, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_CAMERA_YAW_ANGLE, 4) &&
           VerifyField<uint8_t>(verifier, VT_STRAFE_LEFT, 1) &&
           VerifyField<uint8_t>(verifier, VT_STRAFE_RIGHT, 1) &&
           VerifyField<uint8_t>(verifier, VT_MOVE_FORWARD, 1) &&
           VerifyField<uint8_t>(verifier, VT_MOVE_BACKWARDS, 1) &&
           verifier.EndTable();
  }
};

struct ControlStatesBuilder {
  typedef ControlStates Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_camera_yaw_angle(float camera_yaw_angle) {
    fbb_.AddElement<float>(ControlStates::VT_CAMERA_YAW_ANGLE, camera_yaw_angle, 0.0f);
  }
  void add_strafe_left(bool strafe_left) {
    fbb_.AddElement<uint8_t>(ControlStates::VT_STRAFE_LEFT, static_cast<uint8_t>(strafe_left), 0);
  }
  void add_strafe_right(bool strafe_right) {
    fbb_.AddElement<uint8_t>(ControlStates::VT_STRAFE_RIGHT, static_cast<uint8_t>(strafe_right), 0);
  }
  void add_move_forward(bool move_forward) {
    fbb_.AddElement<uint8_t>(ControlStates::VT_MOVE_FORWARD, static_cast<uint8_t>(move_forward), 0);
  }
  void add_move_backwards(bool move_backwards) {
    fbb_.AddElement<uint8_t>(ControlStates::VT_MOVE_BACKWARDS, static_cast<uint8_t>(move_backwards), 0);
  }
  explicit ControlStatesBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ControlStates> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ControlStates>(end);
    return o;
  }
};

inline flatbuffers::Offset<ControlStates> CreateControlStates(
    flatbuffers::FlatBufferBuilder &_fbb,
    float camera_yaw_angle = 0.0f,
    bool strafe_left = false,
    bool strafe_right = false,
    bool move_forward = false,
    bool move_backwards = false) {
  ControlStatesBuilder builder_(_fbb);
  builder_.add_camera_yaw_angle(camera_yaw_angle);
  builder_.add_move_backwards(move_backwards);
  builder_.add_move_forward(move_forward);
  builder_.add_strafe_right(strafe_right);
  builder_.add_strafe_left(strafe_left);
  return builder_.Finish();
}

inline const GWIPC::ControlStates *GetControlStates(const void *buf) {
  return flatbuffers::GetRoot<GWIPC::ControlStates>(buf);
}

inline const GWIPC::ControlStates *GetSizePrefixedControlStates(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<GWIPC::ControlStates>(buf);
}

inline bool VerifyControlStatesBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<GWIPC::ControlStates>(nullptr);
}

inline bool VerifySizePrefixedControlStatesBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<GWIPC::ControlStates>(nullptr);
}

inline void FinishControlStatesBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<GWIPC::ControlStates> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedControlStatesBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<GWIPC::ControlStates> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace GWIPC

#endif  // FLATBUFFERS_GENERATED_CONTROLSTATES_GWIPC_H_

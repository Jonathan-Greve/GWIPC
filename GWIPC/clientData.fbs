namespace GWIPC;

struct Vec2 {
  x:float;
  y:float;
}

struct Vec3 {
  x:float;
  y:float;
  z:float;
}

enum GameState : byte { Unknown = 0, Loading = 1, CharSelect = 2, InGame = 3 }
enum TeamColor : byte { None = 0, Blue = 1, Red = 2, Yellow = 3 }
enum Profession : byte { 
  None = 0, 
  Warrior = 1, 
  Ranger = 2,
  Monk = 3,
  Necromancer = 4,
  Mesmer = 5,
  Elementalist = 6,
  Assassin = 7,
  Ritualist = 8,
  Paragon = 9,
  Dervish = 10
}

struct Agent {
  agent_id:uint32;

  position:Vec3;
  terrain_normal:Vec3;
  rotation:float;
  velocity:Vec2;

  model_width:float;
  model_height:float;

  instance_timer:uint32;
}

table AgentLiving {
  agent:Agent;
  name:string;
  
  owner_agent_id:uint32;

  animation_type:float;

  weapon_attack_speed:float;
  weapon_attack_speed_modifier:float;

  player_number:uint16;

  primary_profession:Profession;
  secondary_profession:Profession;
  
  team_color:TeamColor;

  guild_id:uint16;

  level:uint8;

  health:float;
  max_health:uint32;
  health_recharge:float;
  energy:float;
  max_energy:uint32;
  energy_recharge:float;

  party_slot:uint8 = 0;
}

struct Skill {
  skill_id:uint16;
  recharge_ms:uint16;
  adrenaline:uint8;
}

table Skillbar {
    skills:[Skill];
}

struct Effect{
  skill_id:uint32;
  source_agent_id:uint32;
  duration:float;
}

struct Buff {
  skill_id:uint32;
  target_agent_id:uint32;
  buff_id:uint32;
}

table Character {
  agent_living:AgentLiving;
  skillbar:Skillbar;

  effects:[Effect];
  buffs:[Buff];
}

table Hero {
  agent_living:AgentLiving;
  skillbar:Skillbar;

  effects:[Effect];
  buffs:[Buff];

  flag_position:Vec2;

  hero_id:uint32;
  owner_player_id:uint32;
}

table MissionObjective {
  objective_id:uint32;
  description:string;
  type:uint32;
}

table Party {
  party_id:uint32;
  player_members:[AgentLiving];
  hero_members:[Hero];
  henchman_members:[AgentLiving];

  flag_all_position:Vec3;

  mission_objectives:[MissionObjective];
}

table Instance {
  instance_id:uint32;
  map_id:uint32;
}

table ClientData {
    character:Character;
    instance:Instance;
    party:Party;
    game_state:GameState;
}

root_type ClientData;